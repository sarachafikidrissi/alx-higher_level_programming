========================================================================
'Test for 5-text_indentation module'
========================================================================
'Funtion to test:   text_indentation()'
========================================================================

>>> text_indentation = __import__('5-text_indentation').text_indentation

'text is string'
>>> text_indentation("Walter: White? Meco.")
Walter:
<BLANKLINE>
White?
<BLANKLINE>
Meco.
<BLANKLINE>


'text is a string with severals blankspaces'
>>> text_indentation("Walter:		White?            Meco.")
Walter:
<BLANKLINE>
White?
<BLANKLINE>
Meco.
<BLANKLINE>

'text with .?: and without blankspaces'
>>> text_indentation(".?:")
.
<BLANKLINE>
?
<BLANKLINE>
:
<BLANKLINE>

'text is an integer'
>>> text_indentation(4)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is floating'
>>> text_indentation(4.5)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is a boolean
>>> text_indentation(False)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is a tuple'
>>> text_indentation(('John', 30))
Traceback (most recent call last):
...
TypeError: text must be a string

'text is a list'
>>> text_indentation(['apple', 'banana', 'cherry'])
Traceback (most recent call last):
...
TypeError: text must be a string

'text is a dic'
>>> text_indentation({'name': 'Alice', 'age': 25})
Traceback (most recent call last):
...
TypeError: text must be a string

'text is empty'
>>> text_indentation()
Traceback (most recent call last):
...
TypeError: text_indentation() missing 1 required positional argument: 'text'
